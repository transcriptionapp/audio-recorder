import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { useClipboard } from "@/hooks/useClipboard";
import axios from "axios";

export default function TranscriptionScreen() {
  const [recording, setRecording] = useState(false);
  const [audioChunks, setAudioChunks] = useState([]);
  const [mediaRecorder, setMediaRecorder] = useState(null);
  const [transcript, setTranscript] = useState("");
  const [editing, setEditing] = useState(false);
  const { copy } = useClipboard();
  const airtableBaseURL = "https://api.airtable.com/v0/YOUR_BASE_ID/YOUR_TABLE_NAME";
  const webhookURL = "https://hook.eu2.make.com/k3a1gdx5ypf75heuu72hdxz1j94d2o7z";

  useEffect(() => {
    fetchTranscription();
  }, []);

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const recorder = new MediaRecorder(stream, { mimeType: "audio/webm" });
      let chunks = [];

      recorder.ondataavailable = (event) => {
        chunks.push(event.data);
      };

      recorder.onstop = async () => {
        const audioBlob = new Blob(chunks, { type: "audio/mpeg" });
        uploadRecording(audioBlob);
      };

      setAudioChunks([]);
      setMediaRecorder(recorder);
      recorder.start();
      setRecording(true);
    } catch (error) {
      console.error("Recording error:", error);
    }
  };

  const stopRecording = () => {
    if (mediaRecorder) {
      mediaRecorder.stop();
      setRecording(false);
    }
  };

  const uploadRecording = async (audioBlob) => {
    const formData = new FormData();
    formData.append("file", audioBlob, "recording.mp3");

    try {
      await axios.post(webhookURL, formData);
      setTimeout(fetchTranscription, 5000);
    } catch (error) {
      console.error("Upload error:", error);
    }
  };

  const fetchTranscription = async () => {
    try {
      const response = await axios.get(airtableBaseURL, {
        headers: { Authorization: "Bearer YOUR_API_KEY" },
      });

      if (response.data.records.length > 0) {
        setTranscript(response.data.records[0].fields.transcription || "");
      }
    } catch (error) {
      console.error("Fetch error:", error);
    }
  };

  const saveTranscript = async () => {
    try {
      await axios.patch(airtableBaseURL, {
        records: [{ fields: { transcription: transcript } }],
      }, { headers: { Authorization: "Bearer YOUR_API_KEY" } });
      setEditing(false);
    } catch (error) {
      console.error("Save error:", error);
    }
  };

  return (
    <div className="p-4">
      <Card>
        <CardContent>
          <div className="flex flex-col items-center gap-4">
            {!recording ? (
              <Button onClick={startRecording}>Start Recording</Button>
            ) : (
              <Button onClick={stopRecording}>Stop Recording</Button>
            )}
            {transcript && (
              <>
                <Textarea
                  value={transcript}
                  onChange={(e) => setTranscript(e.target.value)}
                  disabled={!editing}
                />
                <div className="flex gap-2">
                  <Button onClick={() => setEditing(!editing)}>
                    {editing ? "Done Editing" : "Edit"}
                  </Button>
                  <Button onClick={saveTranscript} disabled={!editing}>Save</Button>
                  <Button onClick={() => copy(transcript)}>Copy to Clipboard</Button>
                </div>
              </>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
